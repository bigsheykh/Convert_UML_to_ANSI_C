UI:
  1: make it general

classBaseUML:
  1: SameAttributeAndMethodName
  2: SameAttributeAndClassName
  3: SameMethodAndClassName
  4: add 3 probelms to array of attribute
  5: change name lexical analize for attibute name(seperate param, function and attribute)
  6: fix the lexical analyze bug
  7: get directory of phase1 output

diagramGUI:
  1: get directory of phase1 output
  2: Show diagram
  3: make 2 phase controller
  4: redesign info getter

Phase1CodeGeneration:
  1: output status if failed and when it failed (do it for first and final)
  2: result dependency (do it for first and final)
  3: check header upper method call

Phase2CodeGeneration:
  1: edit c files
    a : constructor
     I: definiton
     II: "new"
    b: destructor
      I: "delete"
      II: }
    c: "class" -> "union"
    d: cast (optional)
    e: method call
    f: {}
    g: ()
    h: []

  2: edit cpp files
    0: change .cpp to .c
    a: detect "this" (probably needs nothing!)
    b: change attribute to this.attribute -->define
    c: method call -- >define
    d: add header include
  detail:

    see class X -> union X
    if(--- is not a pointer)
    sizeof(---) do nothing
    (---) v -> v.union---

    constructor:(if it's not param)
    class v m (if pointer = 0)
    use constructor(&m)
    class v m(--)
    use constructor(&m, --)
    class *m = new class V(--)
    use malloc
    use constructor(m, --)

    class *m = new class V[]
    use malloc
    use array constructor

    method:
      v->m(---)
      use m(v,---)
      v.m(---)
      use m(&(v), ---)

    destructor
    delete x
    destructor x
    delete[] x
    destructor all x


    cpp:
      ID::ID(---)
      change constructor signature
      ID::~ID()
      change destructor signature
      type ID::name(----)
      change method signature


      detect attributes without this
      detect methods without this



test:
  1: phase1 and 2 total
  2: xml*
  3: BasicDiagramStatus+
  4: graphBaseDependency+
